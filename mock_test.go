// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package messenger_test

import (
	"context"
	"github.com/x4b1/messenger"
	"sync"
	"time"
)

// Ensure, that StoreMock does implement messenger.Store.
// If this is not the case, regenerate this file with moq.
var _ messenger.Store = &StoreMock{}

// StoreMock is a mock implementation of messenger.Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked messenger.Store
//		mockedStore := &StoreMock{
//			DeletePublishedByExpirationFunc: func(ctx context.Context, exp time.Duration) error {
//				panic("mock out the DeletePublishedByExpiration method")
//			},
//			MessagesFunc: func(ctx context.Context, batch int) ([]messenger.Message, error) {
//				panic("mock out the Messages method")
//			},
//			PublishedFunc: func(ctx context.Context, msg messenger.Message) error {
//				panic("mock out the Published method")
//			},
//		}
//
//		// use mockedStore in code that requires messenger.Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// DeletePublishedByExpirationFunc mocks the DeletePublishedByExpiration method.
	DeletePublishedByExpirationFunc func(ctx context.Context, exp time.Duration) error

	// MessagesFunc mocks the Messages method.
	MessagesFunc func(ctx context.Context, batch int) ([]messenger.Message, error)

	// PublishedFunc mocks the Published method.
	PublishedFunc func(ctx context.Context, msg messenger.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// DeletePublishedByExpiration holds details about calls to the DeletePublishedByExpiration method.
		DeletePublishedByExpiration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Exp is the exp argument value.
			Exp time.Duration
		}
		// Messages holds details about calls to the Messages method.
		Messages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch int
		}
		// Published holds details about calls to the Published method.
		Published []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg messenger.Message
		}
	}
	lockDeletePublishedByExpiration sync.RWMutex
	lockMessages                    sync.RWMutex
	lockPublished                   sync.RWMutex
}

// DeletePublishedByExpiration calls DeletePublishedByExpirationFunc.
func (mock *StoreMock) DeletePublishedByExpiration(ctx context.Context, exp time.Duration) error {
	callInfo := struct {
		Ctx context.Context
		Exp time.Duration
	}{
		Ctx: ctx,
		Exp: exp,
	}
	mock.lockDeletePublishedByExpiration.Lock()
	mock.calls.DeletePublishedByExpiration = append(mock.calls.DeletePublishedByExpiration, callInfo)
	mock.lockDeletePublishedByExpiration.Unlock()
	if mock.DeletePublishedByExpirationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePublishedByExpirationFunc(ctx, exp)
}

// DeletePublishedByExpirationCalls gets all the calls that were made to DeletePublishedByExpiration.
// Check the length with:
//
//	len(mockedStore.DeletePublishedByExpirationCalls())
func (mock *StoreMock) DeletePublishedByExpirationCalls() []struct {
	Ctx context.Context
	Exp time.Duration
} {
	var calls []struct {
		Ctx context.Context
		Exp time.Duration
	}
	mock.lockDeletePublishedByExpiration.RLock()
	calls = mock.calls.DeletePublishedByExpiration
	mock.lockDeletePublishedByExpiration.RUnlock()
	return calls
}

// Messages calls MessagesFunc.
func (mock *StoreMock) Messages(ctx context.Context, batch int) ([]messenger.Message, error) {
	callInfo := struct {
		Ctx   context.Context
		Batch int
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockMessages.Lock()
	mock.calls.Messages = append(mock.calls.Messages, callInfo)
	mock.lockMessages.Unlock()
	if mock.MessagesFunc == nil {
		var (
			messagesOut []messenger.Message
			errOut      error
		)
		return messagesOut, errOut
	}
	return mock.MessagesFunc(ctx, batch)
}

// MessagesCalls gets all the calls that were made to Messages.
// Check the length with:
//
//	len(mockedStore.MessagesCalls())
func (mock *StoreMock) MessagesCalls() []struct {
	Ctx   context.Context
	Batch int
} {
	var calls []struct {
		Ctx   context.Context
		Batch int
	}
	mock.lockMessages.RLock()
	calls = mock.calls.Messages
	mock.lockMessages.RUnlock()
	return calls
}

// Published calls PublishedFunc.
func (mock *StoreMock) Published(ctx context.Context, msg messenger.Message) error {
	callInfo := struct {
		Ctx context.Context
		Msg messenger.Message
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockPublished.Lock()
	mock.calls.Published = append(mock.calls.Published, callInfo)
	mock.lockPublished.Unlock()
	if mock.PublishedFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PublishedFunc(ctx, msg)
}

// PublishedCalls gets all the calls that were made to Published.
// Check the length with:
//
//	len(mockedStore.PublishedCalls())
func (mock *StoreMock) PublishedCalls() []struct {
	Ctx context.Context
	Msg messenger.Message
} {
	var calls []struct {
		Ctx context.Context
		Msg messenger.Message
	}
	mock.lockPublished.RLock()
	calls = mock.calls.Published
	mock.lockPublished.RUnlock()
	return calls
}

// Ensure, that PublisherMock does implement messenger.Publisher.
// If this is not the case, regenerate this file with moq.
var _ messenger.Publisher = &PublisherMock{}

// PublisherMock is a mock implementation of messenger.Publisher.
//
//	func TestSomethingThatUsesPublisher(t *testing.T) {
//
//		// make and configure a mocked messenger.Publisher
//		mockedPublisher := &PublisherMock{
//			PublishFunc: func(ctx context.Context, msg messenger.Message) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedPublisher in code that requires messenger.Publisher
//		// and then make assertions.
//
//	}
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, msg messenger.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg messenger.Message
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(ctx context.Context, msg messenger.Message) error {
	callInfo := struct {
		Ctx context.Context
		Msg messenger.Message
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	if mock.PublishFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PublishFunc(ctx, msg)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	Ctx context.Context
	Msg messenger.Message
} {
	var calls []struct {
		Ctx context.Context
		Msg messenger.Message
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// Ensure, that ErrorHandlerMock does implement messenger.ErrorHandler.
// If this is not the case, regenerate this file with moq.
var _ messenger.ErrorHandler = &ErrorHandlerMock{}

// ErrorHandlerMock is a mock implementation of messenger.ErrorHandler.
//
//	func TestSomethingThatUsesErrorHandler(t *testing.T) {
//
//		// make and configure a mocked messenger.ErrorHandler
//		mockedErrorHandler := &ErrorHandlerMock{
//			ErrorFunc: func(ctx context.Context, err error)  {
//				panic("mock out the Error method")
//			},
//		}
//
//		// use mockedErrorHandler in code that requires messenger.ErrorHandler
//		// and then make assertions.
//
//	}
type ErrorHandlerMock struct {
	// ErrorFunc mocks the Error method.
	ErrorFunc func(ctx context.Context, err error)

	// calls tracks calls to the methods.
	calls struct {
		// Error holds details about calls to the Error method.
		Error []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Err is the err argument value.
			Err error
		}
	}
	lockError sync.RWMutex
}

// Error calls ErrorFunc.
func (mock *ErrorHandlerMock) Error(ctx context.Context, err error) {
	callInfo := struct {
		Ctx context.Context
		Err error
	}{
		Ctx: ctx,
		Err: err,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	if mock.ErrorFunc == nil {
		return
	}
	mock.ErrorFunc(ctx, err)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedErrorHandler.ErrorCalls())
func (mock *ErrorHandlerMock) ErrorCalls() []struct {
	Ctx context.Context
	Err error
} {
	var calls []struct {
		Ctx context.Context
		Err error
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}
