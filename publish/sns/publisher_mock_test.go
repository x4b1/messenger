// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sns_test

import (
	"context"
	servicesns "github.com/aws/aws-sdk-go-v2/service/sns"
	publishsns "github.com/x4b1/messenger/publish/sns"
	"sync"
)

// Ensure, that ClientMock does implement publishsns.Client.
// If this is not the case, regenerate this file with moq.
var _ publishsns.Client = &ClientMock{}

// ClientMock is a mock implementation of publishsns.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked publishsns.Client
//		mockedClient := &ClientMock{
//			PublishFunc: func(ctx context.Context, params *servicesns.PublishInput, optFns ...func(*servicesns.Options)) (*servicesns.PublishOutput, error) {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedClient in code that requires publishsns.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, params *servicesns.PublishInput, optFns ...func(*servicesns.Options)) (*servicesns.PublishOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *servicesns.PublishInput
			// OptFns is the optFns argument value.
			OptFns []func(*servicesns.Options)
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *ClientMock) Publish(ctx context.Context, params *servicesns.PublishInput, optFns ...func(*servicesns.Options)) (*servicesns.PublishOutput, error) {
	callInfo := struct {
		Ctx    context.Context
		Params *servicesns.PublishInput
		OptFns []func(*servicesns.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	if mock.PublishFunc == nil {
		var (
			publishOutputOut *servicesns.PublishOutput
			errOut           error
		)
		return publishOutputOut, errOut
	}
	return mock.PublishFunc(ctx, params, optFns...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedClient.PublishCalls())
func (mock *ClientMock) PublishCalls() []struct {
	Ctx    context.Context
	Params *servicesns.PublishInput
	OptFns []func(*servicesns.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *servicesns.PublishInput
		OptFns []func(*servicesns.Options)
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
