// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package broker

import (
	"context"
	"github.com/x4b1/messenger"
	"sync"
)

// Ensure, that BrokerMock does implement Broker.
// If this is not the case, regenerate this file with moq.
var _ Broker = &BrokerMock{}

// BrokerMock is a mock implementation of Broker.
//
//	func TestSomethingThatUsesBroker(t *testing.T) {
//
//		// make and configure a mocked Broker
//		mockedBroker := &BrokerMock{
//			PublishFunc: func(ctx context.Context, msg messenger.Message) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedBroker in code that requires Broker
//		// and then make assertions.
//
//	}
type BrokerMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, msg messenger.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg messenger.Message
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *BrokerMock) Publish(ctx context.Context, msg messenger.Message) error {
	callInfo := struct {
		Ctx context.Context
		Msg messenger.Message
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	if mock.PublishFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PublishFunc(ctx, msg)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedBroker.PublishCalls())
func (mock *BrokerMock) PublishCalls() []struct {
	Ctx context.Context
	Msg messenger.Message
} {
	var calls []struct {
		Ctx context.Context
		Msg messenger.Message
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
