// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sqs_test

import (
	"context"
	servicesqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	brokersqs "github.com/x4b1/messenger/broker/sqs"
	"sync"
)

// Ensure, that ClientMock does implement brokersqs.Client.
// If this is not the case, regenerate this file with moq.
var _ brokersqs.Client = &ClientMock{}

// ClientMock is a mock implementation of brokersqs.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked brokersqs.Client
//		mockedClient := &ClientMock{
//			DeleteMessageFunc: func(contextMoqParam context.Context, deleteMessageInput *servicesqs.DeleteMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.DeleteMessageOutput, error) {
//				panic("mock out the DeleteMessage method")
//			},
//			GetQueueUrlFunc: func(contextMoqParam context.Context, getQueueUrlInput *servicesqs.GetQueueUrlInput, fns ...func(*servicesqs.Options)) (*servicesqs.GetQueueUrlOutput, error) {
//				panic("mock out the GetQueueUrl method")
//			},
//			ReceiveMessageFunc: func(contextMoqParam context.Context, receiveMessageInput *servicesqs.ReceiveMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.ReceiveMessageOutput, error) {
//				panic("mock out the ReceiveMessage method")
//			},
//			SendMessageFunc: func(contextMoqParam context.Context, sendMessageInput *servicesqs.SendMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.SendMessageOutput, error) {
//				panic("mock out the SendMessage method")
//			},
//		}
//
//		// use mockedClient in code that requires brokersqs.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(contextMoqParam context.Context, deleteMessageInput *servicesqs.DeleteMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.DeleteMessageOutput, error)

	// GetQueueUrlFunc mocks the GetQueueUrl method.
	GetQueueUrlFunc func(contextMoqParam context.Context, getQueueUrlInput *servicesqs.GetQueueUrlInput, fns ...func(*servicesqs.Options)) (*servicesqs.GetQueueUrlOutput, error)

	// ReceiveMessageFunc mocks the ReceiveMessage method.
	ReceiveMessageFunc func(contextMoqParam context.Context, receiveMessageInput *servicesqs.ReceiveMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.ReceiveMessageOutput, error)

	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(contextMoqParam context.Context, sendMessageInput *servicesqs.SendMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.SendMessageOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteMessageInput is the deleteMessageInput argument value.
			DeleteMessageInput *servicesqs.DeleteMessageInput
			// Fns is the fns argument value.
			Fns []func(*servicesqs.Options)
		}
		// GetQueueUrl holds details about calls to the GetQueueUrl method.
		GetQueueUrl []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetQueueUrlInput is the getQueueUrlInput argument value.
			GetQueueUrlInput *servicesqs.GetQueueUrlInput
			// Fns is the fns argument value.
			Fns []func(*servicesqs.Options)
		}
		// ReceiveMessage holds details about calls to the ReceiveMessage method.
		ReceiveMessage []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ReceiveMessageInput is the receiveMessageInput argument value.
			ReceiveMessageInput *servicesqs.ReceiveMessageInput
			// Fns is the fns argument value.
			Fns []func(*servicesqs.Options)
		}
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SendMessageInput is the sendMessageInput argument value.
			SendMessageInput *servicesqs.SendMessageInput
			// Fns is the fns argument value.
			Fns []func(*servicesqs.Options)
		}
	}
	lockDeleteMessage  sync.RWMutex
	lockGetQueueUrl    sync.RWMutex
	lockReceiveMessage sync.RWMutex
	lockSendMessage    sync.RWMutex
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *ClientMock) DeleteMessage(contextMoqParam context.Context, deleteMessageInput *servicesqs.DeleteMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.DeleteMessageOutput, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		DeleteMessageInput *servicesqs.DeleteMessageInput
		Fns                []func(*servicesqs.Options)
	}{
		ContextMoqParam:    contextMoqParam,
		DeleteMessageInput: deleteMessageInput,
		Fns:                fns,
	}
	mock.lockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	mock.lockDeleteMessage.Unlock()
	if mock.DeleteMessageFunc == nil {
		var (
			deleteMessageOutputOut *servicesqs.DeleteMessageOutput
			errOut                 error
		)
		return deleteMessageOutputOut, errOut
	}
	return mock.DeleteMessageFunc(contextMoqParam, deleteMessageInput, fns...)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//
//	len(mockedClient.DeleteMessageCalls())
func (mock *ClientMock) DeleteMessageCalls() []struct {
	ContextMoqParam    context.Context
	DeleteMessageInput *servicesqs.DeleteMessageInput
	Fns                []func(*servicesqs.Options)
} {
	var calls []struct {
		ContextMoqParam    context.Context
		DeleteMessageInput *servicesqs.DeleteMessageInput
		Fns                []func(*servicesqs.Options)
	}
	mock.lockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	mock.lockDeleteMessage.RUnlock()
	return calls
}

// GetQueueUrl calls GetQueueUrlFunc.
func (mock *ClientMock) GetQueueUrl(contextMoqParam context.Context, getQueueUrlInput *servicesqs.GetQueueUrlInput, fns ...func(*servicesqs.Options)) (*servicesqs.GetQueueUrlOutput, error) {
	callInfo := struct {
		ContextMoqParam  context.Context
		GetQueueUrlInput *servicesqs.GetQueueUrlInput
		Fns              []func(*servicesqs.Options)
	}{
		ContextMoqParam:  contextMoqParam,
		GetQueueUrlInput: getQueueUrlInput,
		Fns:              fns,
	}
	mock.lockGetQueueUrl.Lock()
	mock.calls.GetQueueUrl = append(mock.calls.GetQueueUrl, callInfo)
	mock.lockGetQueueUrl.Unlock()
	if mock.GetQueueUrlFunc == nil {
		var (
			getQueueUrlOutputOut *servicesqs.GetQueueUrlOutput
			errOut               error
		)
		return getQueueUrlOutputOut, errOut
	}
	return mock.GetQueueUrlFunc(contextMoqParam, getQueueUrlInput, fns...)
}

// GetQueueUrlCalls gets all the calls that were made to GetQueueUrl.
// Check the length with:
//
//	len(mockedClient.GetQueueUrlCalls())
func (mock *ClientMock) GetQueueUrlCalls() []struct {
	ContextMoqParam  context.Context
	GetQueueUrlInput *servicesqs.GetQueueUrlInput
	Fns              []func(*servicesqs.Options)
} {
	var calls []struct {
		ContextMoqParam  context.Context
		GetQueueUrlInput *servicesqs.GetQueueUrlInput
		Fns              []func(*servicesqs.Options)
	}
	mock.lockGetQueueUrl.RLock()
	calls = mock.calls.GetQueueUrl
	mock.lockGetQueueUrl.RUnlock()
	return calls
}

// ReceiveMessage calls ReceiveMessageFunc.
func (mock *ClientMock) ReceiveMessage(contextMoqParam context.Context, receiveMessageInput *servicesqs.ReceiveMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.ReceiveMessageOutput, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		ReceiveMessageInput *servicesqs.ReceiveMessageInput
		Fns                 []func(*servicesqs.Options)
	}{
		ContextMoqParam:     contextMoqParam,
		ReceiveMessageInput: receiveMessageInput,
		Fns:                 fns,
	}
	mock.lockReceiveMessage.Lock()
	mock.calls.ReceiveMessage = append(mock.calls.ReceiveMessage, callInfo)
	mock.lockReceiveMessage.Unlock()
	if mock.ReceiveMessageFunc == nil {
		var (
			receiveMessageOutputOut *servicesqs.ReceiveMessageOutput
			errOut                  error
		)
		return receiveMessageOutputOut, errOut
	}
	return mock.ReceiveMessageFunc(contextMoqParam, receiveMessageInput, fns...)
}

// ReceiveMessageCalls gets all the calls that were made to ReceiveMessage.
// Check the length with:
//
//	len(mockedClient.ReceiveMessageCalls())
func (mock *ClientMock) ReceiveMessageCalls() []struct {
	ContextMoqParam     context.Context
	ReceiveMessageInput *servicesqs.ReceiveMessageInput
	Fns                 []func(*servicesqs.Options)
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ReceiveMessageInput *servicesqs.ReceiveMessageInput
		Fns                 []func(*servicesqs.Options)
	}
	mock.lockReceiveMessage.RLock()
	calls = mock.calls.ReceiveMessage
	mock.lockReceiveMessage.RUnlock()
	return calls
}

// SendMessage calls SendMessageFunc.
func (mock *ClientMock) SendMessage(contextMoqParam context.Context, sendMessageInput *servicesqs.SendMessageInput, fns ...func(*servicesqs.Options)) (*servicesqs.SendMessageOutput, error) {
	callInfo := struct {
		ContextMoqParam  context.Context
		SendMessageInput *servicesqs.SendMessageInput
		Fns              []func(*servicesqs.Options)
	}{
		ContextMoqParam:  contextMoqParam,
		SendMessageInput: sendMessageInput,
		Fns:              fns,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	if mock.SendMessageFunc == nil {
		var (
			sendMessageOutputOut *servicesqs.SendMessageOutput
			errOut               error
		)
		return sendMessageOutputOut, errOut
	}
	return mock.SendMessageFunc(contextMoqParam, sendMessageInput, fns...)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//
//	len(mockedClient.SendMessageCalls())
func (mock *ClientMock) SendMessageCalls() []struct {
	ContextMoqParam  context.Context
	SendMessageInput *servicesqs.SendMessageInput
	Fns              []func(*servicesqs.Options)
} {
	var calls []struct {
		ContextMoqParam  context.Context
		SendMessageInput *servicesqs.SendMessageInput
		Fns              []func(*servicesqs.Options)
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
